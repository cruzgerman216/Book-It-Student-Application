{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.user = new BehaviorSubject(null);\n      this.token = null;\n    }\n\n    signup(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    signin(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    logout() {\n      this.user.next(null);\n    }\n\n    handleAuthentication(email, userId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, userId, token, expirationDate);\n      this.user.next(user);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}